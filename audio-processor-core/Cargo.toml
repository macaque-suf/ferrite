[package]
name = "wasm-audio-ferrite"
version = "0.1.0"
edition = "2021"
authors = ["Zeneil Ambekar"]
description = "High-performance real-time audio noise reduction powered by WebAssembly and Rust"
license = "MIT"
repository = "https://github.com/yourusername/wasm-audio-ferrite"
homepage = "https://github.com/yourusername/wasm-audio-ferrite"
documentation = "https://docs.rs/wasm-audio-ferrite"
readme = "../README.md"
keywords = ["audio", "wasm", "noise-reduction", "dsp", "real-time"]
categories = ["multimedia::audio", "wasm", "algorithms"]

[lib]
# Generate a C-compatible dynamic library for WASM
crate-type = ["cdylib", "rlib"]

[dependencies]
# Core WASM bindings
wasm-bindgen = "0.2.92"

# FFT processing - using rustfft for pure Rust implementation
rustfft = "6.2"

# Complex number support for FFT
num-complex = { version = "0.4", default-features = false }

# Performance optimization for no_std compatibility
libm = "0.2"

# Serialization for passing data between JS and WASM
serde = { version = "1.0", features = ["derive"] }
serde-wasm-bindgen = "0.6"

# Console error panic hook for better debugging
console_error_panic_hook = { version = "0.1", optional = true }

# Web APIs
[dependencies.web-sys]
version = "0.3"
features = [
  "console",
  "Performance",
  "Window",
]

# Random number generation for noise synthesis
[dependencies.rand]
version = "0.8"
features = ["small_rng"]

# JavaScript bindings
[dependencies.js-sys]
version = "0.3"

[features]
default = ["console_panic"]
console_panic = ["console_error_panic_hook"]
simd = []

# Development dependencies for testing
[dev-dependencies]
wasm-bindgen-test = "0.3"
approx = "0.5"  # For floating point comparisons in tests
criterion = "0.5"  # For benchmarking

# Profile for release builds - maximum optimization
[profile.release]
opt-level = 3           # Maximum optimization
lto = true             # Link-time optimization
codegen-units = 1      # Single codegen unit for better optimization
strip = true           # Strip symbols for smaller size
panic = "abort"        # Smaller binary, no unwinding
overflow-checks = false # Disable in release for performance

# Profile for profiling builds
[profile.profiling]
inherits = "release"
debug = true           # Keep debug symbols for profiling

# Profile for WASM size optimization
[profile.wasm-release]
inherits = "release"
opt-level = "z"        # Optimize for size
lto = "fat"           # Aggressive LTO
strip = true

# Optimize build dependencies for faster compilation
[profile.dev.build-override]
opt-level = 3

[profile.release.build-override]
opt-level = 3

# Package metadata for wasm-pack
[package.metadata.wasm-pack]
# Disable wasm-opt to avoid bulk memory operation issues
# We'll use rustc's own optimizations instead
"wasm-opt" = false

[target.'cfg(target_arch = "wasm32")'.dependencies]
# WASM-specific dependencies
getrandom = { version = "0.2", features = ["js"] }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
# Native dependencies for testing outside WASM
hound = "3.5"  # WAV file I/O for testing
cpal = "0.15"  # Cross-platform audio I/O
anyhow = "1.0"  # Error handling

# Configuration for documentation
[package.metadata.docs.rs]
all-features = true
targets = ["wasm32-unknown-unknown"]

# Linting configuration
[lints.rust]
unsafe_code = "warn"
missing_docs = "warn"

[lints.clippy]
all = "warn"
pedantic = "warn"
nursery = "warn"
cargo = "warn"
# Allow some common patterns in DSP code
cast_precision_loss = "allow"  # Common in DSP for f64->f32
cast_possible_truncation = "allow"  # Common for indices
cast_sign_loss = "allow"  # Common for unsigned operations
